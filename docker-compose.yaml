services:
  kafka-service:
    image: docker.io/bitnami/kafka:3.8
    container_name: kafka-container
    volumes:
      - "kafka-data:/bitnami"
    networks:
      - linkedin-network
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-service:9093
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-service:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT

  kafbat-ui:
    container_name: kafbat-ui-container
    image: ghcr.io/kafbat/kafka-ui:latest
    ports:
      - 8090:8080
    depends_on:
      - kafka-service
    networks:
      - linkedin-network
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-service:9092
      KAFKA_CLUSTERS_0_KSQLDBSERVER: http://ksqldb0:8088

  notification-db-service:
    image: postgres
    container_name: notification-db-container
    environment:
      - POSTGRES_DB=linkedin_notification_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=root
    networks:
      - linkedin-network
    volumes:
      - notification-db-data:/var/lib/postgresql/data

  posts-db-service:
    image: postgres
    container_name: posts-db-container
    environment:
      - POSTGRES_DB=linkedin_posts_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=root
    networks:
      - linkedin-network
    volumes:
      - posts-db-data:/var/lib/postgresql/data

  users-db-service:
    image: postgres
    container_name: users-db-container
    environment:
      - POSTGRES_DB=linkedin_users_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=root
    networks:
      - linkedin-network
    volumes:
      - user-db-data:/var/lib/postgresql/data

  connection-db-service:
    image: neo4j
    container_name: connection-db-container
    environment:
      - NEO4J_AUTH=neo4j/password  # Set your username and password
    ports:
      - "7474:7474"  # HTTP port
      - "7687:7687"  # Bolt port
    volumes:
      - connection-db-data:/data  # Persist data
    networks:
      - linkedin-network

  discovery-server:
    image: devanshu1309/linkedin-discovery-server
    container_name: discovery-server-container
    networks:
      - linkedin-network
    ports:
      - "8761:8761"

  posts-service:
    image: devanshu1309/linkedin-post-service
    container_name: posts-service-container
    networks:
      - linkedin-network
    depends_on:
      - discovery-server
      - posts-db-service
      - kafka-service

  user-service:
    image: devanshu1309/linkedin-user-service
    container_name: user-service-container
    networks:
      - linkedin-network
    depends_on:
      - discovery-server
      - users-db-service
      - kafka-service

  notification-service:
    image: devanshu1309/linkedin-notification-service
    container_name: notification-service-container
    networks:
      - linkedin-network
    depends_on:
      - discovery-server
      - notification-db-service
      - kafka-service

  connections-service:
    image: devanshu1309/linkedin-connection-service
    container_name: connections-service-container
    networks:
      - linkedin-network
    depends_on:
      - discovery-server
      - connection-db-service
      - kafka-service

  api-gateway:
    image: devanshu1309/linkedin-api-gateway
    container_name: api-gateway-container
    ports:
      - "8080:8080"
    networks:
      - linkedin-network
    depends_on:
      - discovery-server

networks:
  linkedin-network:

volumes:
  kafka-data:
  notification-db-data:
  posts-db-data:
  user-db-data:
  connection-db-data:
